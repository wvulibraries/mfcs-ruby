version: '3.4'
services:
  db:
    container_name: mfcs_db  
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    env_file:
      - './env/.env.dev.db'       
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
        test: pg_isready -U postgres -h postgres
        interval: 30s
        timeout: 3s
        retries: 3 
    networks:
      - mfcs_net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: mfcs_elasticsearch
    restart: always
    env_file:
      - './env/.env.es'   
    volumes: 
      - elasticsearch:/usr/share/elasticsearch/data
    ports: 
      - 9200:9200
      - 9300:9300  
    healthcheck:
      interval: 10s
      retries: 80
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:9200/    
    networks:
      - mfcs_net  

  redis:
    image: redis:alpine
    container_name: mfcs_redis
    command: redis-server
    volumes:
      - redis:/var/lib/redis/data
    restart: unless-stopped
    healthcheck:
      test: redis-cli -h redis ping
      interval: 30s
      timeout: 3s
      retries: 3 
    networks:
      - mfcs_net 

  app: &app_base
    build:
      context: .

  mfcs_ruby:
    <<: *app_base 
    command: >
      bash -c "rm -f tmp/pids/server.pid ; rm -rf tmp/cache ; bundle exec rails s -p 3000 -b 0.0.0.0"
    container_name: mfcs_server
    restart: unless-stopped
    env_file:
      - './env/.env.dev.mfcs'    
    healthcheck:
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:3000/
    ports:
      - "3000:3000"      
    volumes:
      - .:/home/mfcs:cached
      - rails_cache_data:/app/tmp/cache
      - bundle_data:/usr/local/bundle
      - node_modules_data:/home/mfcs/node_modules
      - packs_data:/app/public/packs
      - mfcs_tmp:/home/mfcs/tmp
      - mfcs_storage:/home/mfcs/storage
      - ./importing:/home/mfcs/importing      
    depends_on:
      - db
      - elasticsearch
      - redis
    networks:
      - mfcs_net

  sidekiq:
    <<: *app_base 
    command: bundle exec sidekiq -C config/sidekiq.yml
    container_name: mfcs_sidekiq
    restart: unless-stopped   
    env_file:
      - './env/.env.dev.mfcs'  
    volumes:
      - ./:/home/mfcs:cached
      - rails_cache_data:/app/tmp/cache
      - bundle_data:/usr/local/bundle  
      - mfcs_tmp:/home/mfcs/tmp
      - mfcs_storage:/home/mfcs/storage           
    depends_on:
      - db
      - redis  

  webpacker:
    <<: *app_base
    env_file:
      - './env/.env.dev.webpacker'    
    command: bundle exec ./bin/webpack-dev-server --inline true
    ports:
      - '3035:3035' 
    volumes:
      - .:/home/mfcs:cached
      - bundle_data:/usr/local/bundle
      - node_modules_data:/home/mfcs/node_modules
      - packs_data:/app/public/packs           
    depends_on:
      - db
    networks:
      - mfcs_net

volumes:
  rails_cache_data:
  bundle_data:
  node_modules_data:
  packs_data:
  redis:
  postgres:
  elasticsearch:
  mfcs_tmp:
  mfcs_storage:

networks:
  mfcs_net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-mfcs
  