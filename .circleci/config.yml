version: 2
jobs:
  build:
    environment:
    working_directory: ~/circleci-mfcs
    docker:
      - image: circleci/ruby:2.7.2-node-browsers
        environment:
          CC_TEST_REPORTER_ID: eb58b59e9b4910607d1a8fbc2b5c179188627f4d7502dedae51c6929e1500af1
          RAILS_ENV: test
          TEST_REPORT_PATH: "test/reports"
      - image: circleci/postgres:11 # database image
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: circleci
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
        environment:
          - cluster.name: elasticsearch
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node   
      - image: circleci/redis # redis image        
    parallelism: 2
    steps:
      - checkout

      - run:
          name: Configure secrets.yml
          command: mv config/secrets.ci.yml config/secrets.yml
      - run:
          name: Configure database.yml
          command: mv config/database.ci.yml config/database.yml
      - run:
          name: Configure application.yml
          command: mv config/application.ci.yml config/application.yml      
      - run:
          name: apt update
          command: sudo apt update
      - run:
          name: Install Packages
          command: sudo apt-get install -y graphicsmagick ghostscript ffmpeg  
      - run:
          name: Install Tesseract
          command: sudo apt-get install -y libleptonica-dev libtesseract-dev tesseract-ocr  

      # Restore bundle cache
      - type: cache-restore
        key: mfcs-bundle-{{ checksum "Gemfile.lock" }}

      - run:
          name: Force Bundler Version
          command: |
            sudo gem update --system
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Restore yarn cache
      - type: cache-restore
        key: mfcs-yarn-{{ checksum "yarn.lock" }}

      # Install gem dependencies
      - run: bundle install --path vendor/bundle

      # Install Javascript dependencies
      - run: bin/yarn install

      # Store bundle cache
      - type: cache-save
        key: mfcs-bundle-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      # Store yarn cache
      - type: cache-save
        key: mfcs-yarn-{{ checksum "yarn.lock" }}
        paths:
          - ~/.yarn-cache

      # Database setup
      - run: bin/rails db:create
      - run: bin/rails db:schema:load

      # Code Climate setup
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter

      # Run Ruby unit tests and app integration tests in parallel
      - type: shell
        command: |
          bin/rails test $(circleci tests glob "test/**/*_test.rb" | circleci tests split --split-by=timings)

      # # Run Javascript unit tests
      # - run: yarn test

      # Code Climate coverage, split for parallel nodes
      - run: ./cc-test-reporter format-coverage --input-type simplecov --output "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      # Run security scan
      - run: bundle exec brakeman

      # Save artifacts
      - type: store_test_results
        path: test/reports

      - type: deploy
          command: |
            ./cc-test-reporter sum-coverage --output - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -  

